<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//com.mybatis09.org//DTD Mapper 3.0//EN"
        "http://com.mybatis.org/dtd/com.mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis04.dao04.EmployeeMapperDynamicSQL">
    <!--动态SQL：
        if：判断
        choose(when,otherwise)：分支选择：swtich-case   如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中一个
        trim 字符串截取(where(封装查询条件),set(封装修改（更新）条件))
        foreach
    -->
        <!--查询员工,要求，携带了哪个字段查询条件就带上这个字段的值-->
        <!--public List<Employee> getEmpsByConditionIf(Employee employee);-->

    <!--测试if\where-->
    <select id="getEmpsByConditionIf" resultType="com.mybatis04.bean04.Employee">
        select * from tbl_employee
        <where>

            <!--test:判断表达式(OGNL)     跟<c:if test>的test用法相似
             从参数中取值进行判断-->
            <if test="id!=null">
                id = #{id}
            </if>
            <if test="lastName!=null and lastName!=''">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=''">
                and email = #{email}
            </if>
            <!--OGNL会进行字符串与数字的装换判断 "0"==0-->
            <if test="gender == 0 or gender == 1">
                and gender = #{gender}
            </if>
        </where>
    </select>



        <!--public List<Employee> getEmpsByConditionTrim(Employee employee);-->

    <!--测试Trim-->
    <select id="getEmpsByConditionTrim" resultType="com.mybatis04.bean04.Employee">
        select * from tbl_employee
        <!--解决后面多出的and或者or where标签不能解决
         prefix=""：前缀：trim标签体中 是整个字符串拼串后的结果。
                    prefix 给拼串后的整个字符串加一个前缀
          prefixOverrides="" :前缀覆盖；去掉整个字符串前面多余的字符
          suffix="" ：后缀：给拼串后的整个字符串加一个后缀
          suffixOverrides=""：后缀覆盖：去掉整个字符串后面多余的字符

        -->
        <!--自定义字符串的截取规则-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id = #{id} and
            </if>
            <if test="lastName!=null and lastName!=''">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=''">
                email = #{email} and
            </if>
            <!--OGNL会进行字符串与数字的装换判断 "0"==0-->
            <if test="gender == 0 or gender == 1">
                gender = #{gender}
            </if>
        </trim>
    </select>



            <!--public List<Employee> getEmpsByConditionChoose(Employee employee);-->

         <!--测试choose标签-->
        <select id="getEmpsByConditionChoose" resultType="com.mybatis04.bean04.Employee">
            select * from tbl_employee
            <where>
                <!--如果带了id就用id查，如果带了lastName就用lastName查；只会进入其中一个-->
                <choose>
                    <when test="id!=null">
                        id=#{id}
                    </when>
                    <when test="lastName!=null">
                        last_Name like #{lastName}
                    </when>
                    <when test="email!=null">
                        email=#{email}
                    </when>
                    <otherwise>
                        gender = 0;
                    </otherwise>
                </choose>
            </where>
        </select>



                <!--public void updateEmp(Employee employee);-->
        <!--测试 set标签 更新语句-->
        <update id="updateEmp">
            update tbl_employee
            <!--set标签更新数据-->
            <set>
                <if test="lastName!=null">
                    last_name = #{lastName},
                </if>
                <if test="email!=null">
                    email = #{email},
                </if>
                <if test="gender!=null">
                    gender = #{gender},
                </if>
            </set>

            <!--Trim：更新-->
            <!--
            <trim prefix="set" suffixOverrides="," >
                <if test="lastName!=null">
                    last_name = #{lastName},
                </if>
                <if test="email!=null">
                    email = #{email},
                </if>
                <if test="gender!=null">
                    gender = #{gender},
                </if>
            </trim>
            -->
            where id = #{id}
        </update>



            <!--public List<Employee> getEmpsByConditionForeach(List<Integer> ids);-->
    <!--测试foreach-->
    <select id="getEmpsByConditionForeach" resultType="com.mybatis04.bean04.Employee">
        select * from tbl_employee where id in
        <!--
            collection:指定要遍历的集合
                    list类型的参数会特殊处理封装在map中，map的key就叫list
            item：将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分隔符
            open:遍历出所有结果拼接一个开始的字符
            close:遍历出所有结果拼接一个结束的字符
            index:索引。遍历list的时候就是index就是索引，item就是当前值
                        遍历map的时候index表示的就是map的key，item就是map的值

            #{变量名}就能取出变量的值也就是当前遍历出的元素
        -->
        <foreach collection="ids" item="item_id" separator=","
            open="(" close=")">
            #{item_id}
        </foreach>
    </select>



    <!--批量添加-->
        <!--public void addEmps(@Param("emps") List<Employee> emps);-->
    <insert id="addEmps">
        insert into tbl_employee(
            <!--引用外部定义的sql-->
            <include refid="insertColumn"></include>
        )
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>



    <!--两个内置参数:
            不只是方法传递过来的参数可以用来判断，取值...
            mybatis默认还有两个内置参数：
            _parameter:代表整个参数
                单个参数：_parameter就是这个参数
                多个参数：参数会被封装为一个map：_parameter就是代表这个map

            _databaseId:如果全局配置文件配置了databaseIdProvider标签。
                    _databaseId就是代表当前数据库的别名
    -->

<!--public List<Employee> getEmpsTestInnerParameter(Employee employee);-->
    <select id="getEmpsTestInnerParameter" resultType="com.mybatis04.bean04.Employee">
        <!--bind:可以将OGNL表达式的值绑定到一个变量中，方便后来的引用这个变量的值
            引用就取name就行。-->
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        select * from tbl_employee
        <if test="_parameter!=null">
            where last_name like #{_lastName}
        </if>
    </select>



    <!--抽取可重用的sql片段，方便后面引用
        1.sql经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2.<include>来引用已经抽取的sql的id；
        3.include 还可以自定义一些property，sql标签内部就可以使用自定义的属性
                    取值的正确方式：${xxx},
                    #{不能使用这种方式}
    -->
    <sql id="insertColumn">
        <!--<if test=""></if>这里也可以使用-->
        last_name,email,gender,d_id
    </sql>
</mapper>