<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//com.mybatis09.org//DTD Config 3.0//EN"
        "http://com.mybatis.org/dtd/com.mybatis-3-config.dtd">
<configuration>

    <!--
   1.mybatis可以使用properties标签来引入外部properties配置文件的内容
   resource:引入类路径下的资源
   url:引入网络路径或者磁盘路径下的资源
   -->
    <properties resource="dbconfig.properties"></properties>


    <!--
    2.settings包含了很多重要的设置项
        setting:用来设置每一个设置项
        name：设置项名
        value：设置项值
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>


    <!--
    3.typeAliases：别名处理器，可以为我们的java类型起别名
                    别名不区分大小写-->
    <typeAliases>
    <!--
    typeAlias:为某个java类型起别名
    type：指定要起别名的类型全类名;默认别名就是类名小写>employee
    alias：指定新的别名
    -->
        <!--<typeAlias type="mybatis.bean.Employee" alias="abc" />-->

        <!--package: 为某个包下的所有类批量起别名
            name：指定包名（为当前包以及下面所有的后代每个类起个默认别名（小写））
        -->
        <package name="com.mybatis09.bean09"/>

        <!--批量起别名的情况下，使用@Alias注解为某个类型指定新的别名（在对应的类上面）-->

    </typeAliases>

    <!--
    4.environments:环境们，mybatis可以配置多种环境，default：指定使用某种环境。可以达到快速切换环境
        environment:配置一个具体的环境信息；必须有两个标签；id：代表当前环境的唯一标识
            transactionManager：事务管理器
                    type:事务管理器的类型(JDBC|MANAGED)
            dataSource：数据源
                    type：数据类型(UNPOOLED|POOLED|JND)
                            自定义的数据源：实现DataSourceFactory接口，type是全类名
    -->
    <environments default="development">
        
        <environment id="test">
            <transactionManager type=""></transactionManager>
            <dataSource type=""></dataSource>
        </environment>
        
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">

                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>

            </dataSource>
        </environment>
    </environments>
    
    
    <!--
    5.databaseIdProvider:支持多数据库厂商的；
        type="DB_VENDOR",VendorDatabaseIdProvider
            作用就是得到数据库厂商的标识(驱动getDatabaseProductName)
            mybatis就能根据厂商标识来执行不同的sql
            厂商标识如有：MySQL,Orace,SQL,Server,....
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!--为不同的数据库厂商起别名-->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>

    <!--将我们写好的sql映射文件一定要注册到我们的全局配置文件中-->
    <!--
    5.mappers:将sql映射注册到全局配置中-->
    <mappers>
        <!--mapper:注册一个sql映射
        注册配置文件
            resource:引用类路径下的sql映射文件
            url：引用网络路径或者磁盘路径下的sql映射文件
        注册接口
            class:引用（注册）接口，
                1.有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
                2.没有sql映射文件，所有的sql都是利用注解写在接口上
                    推荐：比较重要的，复杂的Dao接口我们来写在sql映射文件
                          不重要的，简单的Dao接口为了开发方便可以使用注解
        -->
        <!--映射文件的位置-->
        <mapper resource="EmployeeMapper.xml"/>
        <mapper class="mybatis.dao.EmployeeMapperAnnotation"/>

        <!--批量注册-->
        <!--<package name="com.mybatis09.dao09"/>-->
    </mappers>
</configuration>